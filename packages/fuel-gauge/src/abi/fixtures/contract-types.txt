import type { BigNumberish, Bytes, RawSlice, StdString, StrSlice } from 'fuels';
import type { ArrayOfLength, Enum, Option } from './common';

export enum EnumWithNative { Checked = 'Checked', Pending = 'Pending' };
export enum ExternalEnum { A = 'A', B = 'B' };

export type ConfigurablesInput = { U8_VALUE: BigNumberish, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<BigNumberish>, GENERIC_STRUCT_VALUE: StructDoubleGenericInput<StructDoubleGenericInput<BigNumberish, BigNumberish>, BigNumberish> };
export type ConfigurablesOutput = { U8_VALUE: number, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<number>, GENERIC_STRUCT_VALUE: StructDoubleGenericOutput<StructDoubleGenericOutput<number, number>, number> };
export type EnumDoubleGenericInput<T1, T2> = Enum<{ a: T1, b: T2 }>;
export type EnumDoubleGenericOutput<T1, T2> = EnumDoubleGenericInput<T1, T2>;
export type EnumWithBuiltinTypeInput = Enum<{ a: boolean, b: BigNumberish }>;
export type EnumWithBuiltinTypeOutput = EnumWithBuiltinTypeInput;
export type EnumWithStructsInput = Enum<{ a: EnumWithNative, b: StructSimpleInput, c: EnumDoubleGenericInput<BigNumberish, StructSimpleInput> }>;
export type EnumWithStructsOutput = Enum<{ a: EnumWithNative, b: StructSimpleOutput, c: EnumDoubleGenericOutput<BigNumberish, StructSimpleOutput> }>;
export type EnumWithVectorInput = Enum<{ num: BigNumberish, vec: BigNumberish[] }>;
export type EnumWithVectorOutput = Enum<{ num: number, vec: number[] }>;
export type ExternalStructInput = { value: BigNumberish };
export type ExternalStructOutput = ExternalStructInput;
export type StructDoubleGenericInput<T1, T2> = { a: T1, b: T2 };
export type StructDoubleGenericOutput<T1, T2> = StructDoubleGenericInput<T1, T2>;
export type StructGenericWithEnumInput<T1, T2> = { a: T1, b: EnumDoubleGenericInput<T1, T2> };
export type StructGenericWithEnumOutput<T1, T2> = { a: T1, b: EnumDoubleGenericOutput<T1, T2> };
export type StructSimpleInput = { a: boolean, b: BigNumberish };
export type StructSimpleOutput = { a: boolean, b: number };
export type StructSingleGenericInput<T> = { a: T };
export type StructSingleGenericOutput<T> = StructSingleGenericInput<T>;
export type StructWithImplicitGenericsInput<E, F> = { arr: ArrayOfLength<E, 3>, tuple: [E, F], string: string, array: ArrayOfLength<BigNumberish, 2> };
export type StructWithImplicitGenericsOutput<E, F> = { arr: ArrayOfLength<E, 3>, tuple: [E, F], string: string, array: ArrayOfLength<number, 2> };

export interface AbiContractTypes {
    functions: {
        configurables: {
            inputs: [];
            output: ConfigurablesOutput;
        };
        types_array: {
            inputs: [x: ArrayOfLength<BigNumberish, 4>];
            output: ArrayOfLength<number, 4>;
        };
        types_array_struct: {
            inputs: [x: ArrayOfLength<StructSimpleInput, 3>];
            output: ArrayOfLength<StructSimpleOutput, 3>;
        };
        types_array_with_generic_struct: {
            inputs: [x: ArrayOfLength<StructDoubleGenericInput<StructSingleGenericInput<BigNumberish>, string>, 2>];
            output: ArrayOfLength<StructDoubleGenericOutput<StructSingleGenericOutput<BigNumberish>, string>, 2>;
        };
        types_b256: {
            inputs: [x: string];
            output: string;
        };
        types_b512: {
            inputs: [x: string];
            output: string;
        };
        types_bool: {
            inputs: [x: boolean];
            output: boolean;
        };
        types_bytes: {
            inputs: [x: Bytes];
            output: Bytes;
        };
        types_enum: {
            inputs: [x: EnumWithNative];
            output: EnumWithNative;
        };
        types_enum_external: {
            inputs: [x: ExternalEnum];
            output: ExternalEnum;
        };
        types_enum_with_builtin_type: {
            inputs: [x: EnumWithBuiltinTypeInput];
            output: EnumWithBuiltinTypeOutput;
        };
        types_enum_with_structs: {
            inputs: [x: EnumWithStructsInput];
            output: EnumWithStructsOutput;
        };
        types_enum_with_vector: {
            inputs: [x: EnumWithVectorInput];
            output: EnumWithVectorOutput;
        };
        types_generic_enum: {
            inputs: [x: EnumDoubleGenericInput<BigNumberish, BigNumberish>];
            output: EnumDoubleGenericOutput<number, number>;
        };
        types_raw_slice: {
            inputs: [x: RawSlice];
            output: RawSlice;
        };
        types_std_string: {
            inputs: [x: StdString];
            output: StdString;
        };
        types_str: {
            inputs: [x: string];
            output: string;
        };
        types_str_slice: {
            inputs: [x: StrSlice];
            output: StrSlice;
        };
        types_struct_double_generic: {
            inputs: [x: StructGenericWithEnumInput<BigNumberish, BigNumberish>];
            output: StructGenericWithEnumOutput<number, number>;
        };
        types_struct_external: {
            inputs: [x: ExternalStructInput];
            output: ExternalStructOutput;
        };
        types_struct_generic: {
            inputs: [x: StructSingleGenericInput<BigNumberish>];
            output: StructSingleGenericOutput<number>;
        };
        types_struct_simple: {
            inputs: [x: StructSimpleInput];
            output: StructSimpleOutput;
        };
        types_struct_with_implicit_generics: {
            inputs: [x: StructWithImplicitGenericsInput<string, BigNumberish>];
            output: StructWithImplicitGenericsOutput<string, number>;
        };
        types_struct_with_tuple: {
            inputs: [x: StructSingleGenericInput<[boolean, BigNumberish]>];
            output: StructSingleGenericOutput<[boolean, BigNumberish]>;
        };
        types_u16: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u256: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u32: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u64: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u8: {
            inputs: [x: BigNumberish];
            output: number;
        };
    }
}