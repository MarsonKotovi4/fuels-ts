import type { BigNumberish, Bytes, RawSlice, StdString, StrSlice } from 'fuels';
import type { Option } from './common';

export type ConfigurablesInput = { U8_VALUE: BigNumberish, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<BigNumberish>, GENERIC_STRUCT_VALUE: StructDoubleGenericInput<StructDoubleGenericInput<BigNumberish, BigNumberish>, BigNumberish> };
export type ConfigurablesOutput = { U8_VALUE: number, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<number>, GENERIC_STRUCT_VALUE: StructDoubleGenericOutput<StructDoubleGenericOutput<number, number>, number> };
export type StructDoubleGenericInput<T1, T2> = { a: T1, b: T2 };
export type StructDoubleGenericOutput<T1, T2> = { a: T1, b: T2 };

export interface AbiContractTypes {
    functions: {
        configurables: {
            inputs: [];
            output: ConfigurablesOutput;
        };
        types_b256: {
            inputs: [x: string];
            output: string;
        };
        types_b512: {
            inputs: [x: string];
            output: string;
        };
        types_bool: {
            inputs: [x: boolean];
            output: boolean;
        };
        types_bytes: {
            inputs: [x: Bytes];
            output: Bytes;
        };
        types_raw_slice: {
            inputs: [x: RawSlice];
            output: RawSlice;
        };
        types_std_string: {
            inputs: [x: StdString];
            output: StdString;
        };
        types_str: {
            inputs: [x: string];
            output: string;
        };
        types_str_slice: {
            inputs: [x: StrSlice];
            output: StrSlice;
        };
        types_u16: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u256: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u32: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u64: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u8: {
            inputs: [x: BigNumberish];
            output: number;
        };
    }
}