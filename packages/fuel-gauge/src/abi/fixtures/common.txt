interface Types {
  functions: Record<string, { inputs: unknown[]; output: unknown }>;
}

export type FunctionMapper<T extends Types['functions']> = {
  [K in keyof T]: InvokeFunction<T[K]['inputs'], T[K]['output']>;
};

export type ArrayOfLength<T, N extends number, R extends unknown[] = []> = R['length'] extends N
  ? R
  : ArrayOfLength<T, N, [T, ...R]>;
